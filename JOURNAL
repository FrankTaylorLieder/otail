rlog - A Rust-based TUI log file viewer

This is a rebuild of jlog in rust... using TUI and hopefully much better
performance.

Choices:
  - TUI: https://github.com/ratatui/ratatui
    - Use the ELM architecture for the app:
      - Model, Update, View

- TUI example

Commit: 7e4ec61

- Core file reading
  - SFile - start to build out a searchable file.
  - Survey() - scans the file to create a set of line offsets. Currently this is a synchronous.

Commit: 570732b

- Async survey: (example)
  - Start to build out the command structure, enabling the IFile to receive new data, but the view to query existing data.

Commit: 723bd59

- Tailing files, detecting truncation
  - See: https://github.com/notify-rs/notify?tab=readme-ov-file
  - Example: tail.rs
  - As we are using this with Tokio, disable crossbeam-channel as per docs.

Commit: d3dab7c

- Detect if the final line is complete or not.

Commit: b3572fc

- Lay out the backend of rtail... drive using a fixed frontend.
  - IFile
    - Enable registered tailers. (NOT NEEDED?)
    - DONE Enable registered updaters.
  - DONE File Reader
  - Deal with:
    - DONE Truncation
    - DONE File deletion
  - Filtered file (FFile)
    - Like an IFile but uses an IFile as its source instead of a File Reader.
  - View (with colouring) on top of raw IFile or FFile
    - Or do we always have an FFile which sometimes as not filter... does not seem worth it.
    - Create a XFile trait to hide the details of file implementation, or connect with channels?
      - Use channels as FFile is active (scanning the underlying IFile to find matches).
    - DONE Create a test View which just outputs to stdout.
  - Running more than one file at a time

  Design:

  View -> IFile
    -> Get Line
    -> Register updater
    -> Enable/disable tailing
    <- File size change
    <- Truncated
    <- Tail line
    <- Error

  IFile -> Reader
    <- Line
    <- Truncated
    <- Error

  - TUI
    - tui.rs in examples
      - Build out a static version of the UI to play with concepts.
      - DONE: building a list backed by a large data structure
        - Currently the list requires that all items are rendered each frame... this will not work if the file is large.
        - DONE: Build a widget which only renders the items in the current view. E.g. LazyList.
      - DONE Make this event drive so it only updates the UI when something has happened.

Commit: c6a16cd

- Next: integrate the TUI into the main program.
  - DONE Call the View directly from the TUI, or merge. Handle all events in the TUI, passing them to the View for processing.
  - Beef up the LazyList -> LazyTable - i.e. multi-column (to support FilterView match line numbers).
  - Tailing? Can we send a command to the TUI after updating the View to ensure we render the end of the View buffer.
  - View should only store lines that are currently visible.
    - Need to pass view size into handler.
  - IFile should not store data, just line indexes.
  - Colouring is done in the View.

Design 1 (OLD)

  TUI -> View (TUICommand/TUIResponse)
    Get line
    Set line range (to drive caching)
    Change tail state
    
  View -> TUI (TUIEvent)
    Change selected line (last (tailing), first (truncated))
    Truncated (to drive something in the display)
    Error

  View -> IFile
    Register updater
    Request line

  View <- IFile
    Truncated
    Line
    Error

  ISSUE: How do we arrange the TUI and TUIVIew from a threading perspective?
  - API calls TUI -> TV.
    - The TV caches content, or reads directly from the file to get content.
  - Messages TV <-> iFile
    - The iFile only maintains the current structure of the file, indexes of the lines.
    - New follow on content can be requested TV -> iFile.
    - It actively sends updates to the TV when the file length changes or new data is available.
  - The TUI has its own event loop for managing the UI.

  FAILED SOLUTION: Make the TUI -> View channel based. Keep with the same pattern
  all across the system. FAIL: The TUI needs a sync call to get the line data
  during rendering.
    - It also cannot maintain its own cache locally, because it also need sync
      access to the filtered line -> file line mapping for filtered views.

  FAILED SOLUTION: Make the View objects owned by the TUI. It will handle the
  Async responses from ifile, passing them into the relevant View. Who can
  process them, and tell the TUI what to do.
    - FAILED: The async loop in the TUI is about responding to UI events, not
      handling data events which could need no re-render.
      - E.g. data comes from an ifile -> View and FilterView. Both need to be
        routed. After the View update, we know the file is 1 lines longer
        (re-render OK). But the FV may not match the new line, so does not need a
        re-render.

Design 2 (CURRENT) 

The TUI owns a View object which maintains the current data to render the
display. The View can directly send messages to the IFile, but the TUI receives
the messages from the IFile, handing them on to the View. This way the TUI can
own the View to enable quick sync API calls to get the data to render.

We separate the View from the filtering. So the FilteredView talks to a
FilteredIFile, which in turn talks to the IFile.

Responsibilities:

- TUI: render the screen and take input from the user. The TUI owns the View
  objects so can make API calls to them to change the Viewed content, filters
  and tail state. Reads from the IFile back channels and forwards to the
  relevant View.
    - The TUI select should only ever receive messages that should trigger a
      change in the display content. E.g. file stats, new content, new filtered
      matches, truncation or error conditions. We must not send events to the
      TUI which do not need to be rendered. 
- View: hold the data which will be rendered. Understand what needs to be held
  and request it from the IFile.
- IFile: index the file and enable random access to the file contents on demand
  from the View. Track what the View has requested but not been fulilled. Push
  file stats (lines, bytes) and truncation/error conditions to the View.
- Reader: Read the file contents, pushing to the IFile. Actively tails the file
  to see new content ASAP.
- FilteredIfile: maintain an index of lines that match the current filter.
  Actively pull content from the IFile to see if it matches. Like and IFile, be
  driven by the View to know what has been requested but not fulfilled. Also
  actively push updates to the number of matches as they come in. Note: do
  not forward overall file lines/bytes or truncation/error conditions to the
  View.
- FilteredView: Like a view, maintain the cache of displayable data to make
  available to the TUI. Additionally provide API to change the filter.

Messages:

- IFReq
  - Register client
  - Request Line
  - Cancel line request
  - Set tailing
  - Close

- IFResp
  - Line data
  - Stats (lines, bytes)
  - Truncated
  - Error (e.g. deleted)

- FIFReq
  - IFReq
    - Register client
    - Request Line
    - Cancel line request
    - Set tailing
    - Close
  - Set filter

- FIFResp
  - Line data
  - FStats (matching lines)

- RUpdate
  - Line data
  - Stats (lines, bytes)
  - Truncated
  - Error

Commit: ce07e5d

We have got the basic channel flow working, BUT it's far too slow. The reader is being blocked by the ifile.

Without the channel, the reader is able to read the file (60k lines) in 0.6
seconds. I suspect the forwarding stats to the UI is causing the issue.

PROVED: with the reader/ifile, it look 0.8s to read the file.

So... we need to drain the TUI queue at every read, rather than just taking one
item off. Alternatively, we simply don't render on every event. This is simpler
because we don't need to think about the semantics of a Error/Truncate mid
stream drain.

Selective rendering, based on an FPS interval timer solved the problem.

Commit: be2c2df

Build a better view line cache.

Fixed up basic fetching, scrolling and resizing.

Commit: 7a18ca5

Tailing initial design:

- Move to the end of the file.
- Request any missing lines as normal.
- Enable tailing with last line as the last known line.
- ifile sends diff between last known line and current tail.
- ifile sends all subsequent lines.

Commit: 2a45576

FFile initial design:

- Looks like an IFile with an expaded API:
  - Set/unset a filter
- Uses tailing on top of a IFile to spool the file.
  - May need a specific spooling mechanism to prevent channel overflow whilst
    spooling the file.

Basic workflow working.

Commit: 05e953e

Floating window for filter edits:

- Use tui_input for a simple edit textbox
- Design:
  - Floating window with a textbox, radios for regexp, insensitive/sensitive. Toggle for enable.

Commit: cbf741e

Basic end to end functionality working... performance seems OK. E.g. 28M (200k
lines) indexed in a few seconds.

Install: `cargo install --path .`

Usability issues:

- See the end of long lines.
  - Scroll left/right
  - Toggle wrapping
- Locking filtered to content view line selection
  - Need to explicitly track content line on filter content.
- DONE Showing the current filter spec.
- DONE Tailing on filter
- Scrolling whilst tailing... disable tailing when the viewport changes.
- DONE G on Filter view takes you past the last line... viewport set too large?

